
tcfail068.hs:12:
    Inferred type is less polymorphic than expected
	Quantified type variable `s' escapes
    In the first argument of `runST', namely
	`(newSTArray ((1, 1), n) x)'
    In a right-hand side of function `itgen':
	runST (newSTArray ((1, 1), n) x)
    In the definition of `itgen':
	itgen n x = runST (newSTArray ((1, 1), n) x)

tcfail068.hs:17:
    Inferred type is less polymorphic than expected
	Quantified type variable `s' escapes
	It is mentioned in the environment:
	  arr :: IndTree s a (bound at tcfail068.hs:17)
    In the first argument of `runST', namely
	`((readSTArray arr i)
	  >>= (\ val -> (writeSTArray arr i (f val)) >> (return arr)))'
    In a right-hand side of function `itiap':
	runST ((readSTArray arr i)
	       >>= (\ val -> (writeSTArray arr i (f val)) >> (return arr)))
    In the definition of `itiap':
	itiap i f arr
		= runST ((readSTArray arr i) >>= (\ val -> (...) >> (...)))

tcfail068.hs:23:
    Inferred type is less polymorphic than expected
	Quantified type variable `s' escapes
	It is mentioned in the environment:
	  itrapsnd :: Int -> Int -> ST s (IndTree s a)
	    (bound at tcfail068.hs:28)
	  itrap' :: Int -> Int -> ST s (IndTree s a)
	    (bound at tcfail068.hs:25)
	  arr :: IndTree s a (bound at tcfail068.hs:23)
    In the first argument of `runST', namely `(itrap' i k)'
    In a right-hand side of function `itrap': runST (itrap' i k)
    In the definition of `itrap':
	itrap ((i, k), (j, l)) f arr
		= runST (itrap' i k)
		where
		    itrapsnd i k
			       = if i > j then
				     return arr
				 else
				     ((readSTArray arr (i, k)) >>= (\ val -> ...))
		    itrap' i k
			     = if k > l then
				   return arr
			       else
				   ((itrapsnd i k) >> (itrap' i (... + 1)))

tcfail068.hs:35:
    Inferred type is less polymorphic than expected
	Quantified type variable `s' escapes
	It is mentioned in the environment:
	  itrapstatesnd :: Int -> Int -> c -> ST s (c, IndTree s b)
	    (bound at tcfail068.hs:40)
	  itrapstate' :: Int -> Int -> c -> ST s (c, IndTree s b)
	    (bound at tcfail068.hs:37)
	  arr :: IndTree s b (bound at tcfail068.hs:35)
    In the first argument of `runST', namely `(itrapstate' i k s)'
    In a right-hand side of function `itrapstate':
	runST (itrapstate' i k s)
    In the definition of `itrapstate':
	itrapstate ((i, k), (j, l)) f c d s arr
		     = runST (itrapstate' i k s)
		     where
			 itrapstatesnd i k s
					 = if i > j then
					       return (s, arr)
					   else
					       ((readSTArray arr (i, k)) >>= (\ val -> ...))
			 itrapstate' i k s
				       = if k > l then
					     return (s, arr)
					 else
					     ((itrapstatesnd i k s) >>= (\ (s, arr) -> ...))
