def f(opts):
  opts.extra_hc_opts = '-fth -package template-haskell'
  if (ghc_with_interpreter == 0):
	opts.skip = 1

setTestOpts(f)
setTestOpts(only_compiler_types(['ghc']))
setTestOpts(only_ways(['normal','ghci']))

test('TH_mkName', normal, compile, ['-v0'])

test('TH_repE1', normal, compile, [''])
test('TH_repE2', normal, compile_and_run, [''])
test('TH_repE3', normal, compile, [''])
test('TH_repPrim', normal, compile, ['-v0'])
test('TH_spliceGuard', normal, compile, ['-v0'])
test('TH_repPrimOutput', normal, compile_and_run, [''])
test('TH_repGuard', normal, compile, ['-v0'])
test('TH_repGuardOutput', normal, compile_and_run, [''])
test('TH_repPatSig', normal, compile_fail, [''])

test('TH_spliceE5', normal, multimod_compile_and_run, ['TH_spliceE5', '-v0'])
# Testing profiling with TH is a bit tricky; we've already disabled
# the prof way above, and also we want to add options specifically for
# profiling (-osuf p_o) because this is necessary when mixing
# profiling w/ TH.  Furthermore we must have built the program the
# normal way first, so this is a bit of a hack.
test('TH_spliceE5_prof', req_profiling, multimod_compile_and_run, ['TH_spliceE5', '-v0 -prof -auto-all -osuf p_o'])
clean(['TH_spliceE5_Lib.p_o', 'TH_spliceE5_Lib.hi', 'TH_spliceE5_Lib.o',
       'TH_spliceE5.hi', 'TH_spliceE5.p_o'])

test('TH_spliceD1', normal, multimod_compile_fail, ['TH_spliceD1', '-v0'])
clean(['TH_spliceD1_Lib.hi', 'TH_spliceD1_Lib.o'])

test('TH_spliceD2', normal, multimod_compile, ['TH_spliceD2', '-v0'])
clean(['TH_spliceD2_Lib.hi', 'TH_spliceD2_Lib.o'])

test('TH_reifyDecl1', normal, compile, ['-v0'])
test('TH_reifyDecl2', normal, compile, ['-v0'])

test('TH_reifyType1', normal, compile, [''])
test('TH_reifyType2', normal, compile, [''])

test('TH_spliceDecl1', normal, compile, ['-v0'])
test('TH_spliceDecl2', normal, compile, ['-v0'])
test('TH_spliceDecl3', normal, multimod_compile, ['TH_spliceDecl3', '-v0'])
clean(['TH_spliceDecl3_Lib.hi', 'TH_spliceDecl3_Lib.o'])
test('TH_spliceDecl4', normal, multimod_compile, ['TH_spliceDecl4', '-v0'])
clean(['TH_spliceDecl4_Lib.hi', 'TH_spliceDecl4_Lib.o'])

test('TH_spliceE1', normal, compile_and_run, [''])
test('TH_spliceExpr1', normal, compile, ['-v0'])
test('TH_spliceE3', normal, compile, ['-v0'])
test('TH_spliceE4', normal, compile_and_run, [''])

test('TH_bracket1', normal, compile, [''])
test('TH_bracket2', normal, compile, [''])
test('TH_bracket3', normal, compile, [''])

test('TH_class1', normal, compile, ['-v0'])
test('TH_tuple1', normal, compile, ['-v0'])
test('TH_genEx', normal, multimod_compile, ['TH_genEx', '-v0'])
clean(['TH_genExLib.hi', 'TH_genExLib.o'])

test('TH_where', normal, compile_and_run, [''])

test('TH_spliceInst', normal, compile, ['-v0'])

test('TH_exn1', if_compiler_lt('ghc','6.9', namebase('TH_exn1-6.8')), compile_fail, ['-v0'])

test('TH_dupdecl', normal, compile_fail, ['-v0'])
test('TH_exn2', if_compiler_lt('ghc','6.9', namebase('TH_exn2-6.8')), compile_fail, ['-v0'])

test('TH_recover', normal, compile_and_run, [''])
test('TH_dataD1', normal, compile_fail, ['-v0'])

test('TH_ppr1', normal, compile_and_run, ['-fglasgow-exts'])

test('TH_fail', if_compiler_lt('ghc','6.9', namebase('TH_fail-6.8')), compile_fail, ['-v0'])
test('TH_scopedTvs', normal, compile_fail, ['-v0'])

test('TH_runIO', if_compiler_lt('ghc','6.9', namebase('TH_runIO-6.8')), compile_fail, ['-v0'])

test('TH_ghci1', normal, ghci_script, ['TH_ghci1.script'])

test('TH_scope', expect_broken(2188), multimod_compile, ['TH_scope', '-v0'])

