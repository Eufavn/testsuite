

================================================================================
Simplified:
`$d5'  ::  `{PrelBase.Eval (Pair a b)}'
`$d5' =
    _/\_ `$x0' `$x1' -> `PrelBase.void'
`$d4'  ::  `{PrelBase.Eval (LList alpha)}'
`$d4' =
    _/\_ `$x0' -> `PrelBase.void'
`$d2'  ::  `{PrelBase.Eval (Tree x)}'
`$d2' =
    _/\_ `$x0' -> `PrelBase.void'
`$d1'  ::  `{PrelBase.Eval (A a)}'
`$d1' =
    _/\_ `$x0' -> `PrelBase.void'
`MkA'  ::  `a -> A a -> A a'
`MkA' =
    _/\_ `$x0' -> \ `$x1'  ::  `$x0'
		    `$x1' `$x2'  ::  `A $x0'
			  `$x2' ->
	`MkA' {_@_ `$x0' `$x1' `$x2'}
`MkPair'  ::  `a -> b -> Pair a b'
`MkPair' =
    _/\_ `$x0' `$x1' -> \ `$x2'  ::  `$x0'
			  `$x2' `$x3'  ::  `$x1'
				`$x3' ->
	`MkPair' {_@_ `$x0' _@_ `$x1' `$x2' `$x3'}
`Leaf'  ::  `x -> Tree x'
`Leaf' =
    _/\_ `$x0' -> \ `$x1'  ::  `$x0'
		    `$x1' ->
	`Leaf' {_@_ `$x0' `$x1'}
`Node'  ::  `Tree x -> Tree x -> Tree x'
`Node' =
    _/\_ `$x0' -> \ `$x1'  ::  `Tree $x0'
		    `$x1' `$x2'  ::  `Tree $x0'
			  `$x2' ->
	`Node' {_@_ `$x0' `$x1' `$x2'}
`Zero'  ::  `Nat'
`Zero' =
    `Zero' {}
`Succ'  ::  `Nat -> Nat'
`Succ' =
    \ `$x0'  ::  `Nat'
      `$x0' ->
	`Succ' {`$x0'}
`Nill'  ::  `LList alpha'
`Nill' =
    _/\_ `$x0' -> `Nill' {_@_ `$x0'}
`Conss'  ::  `alpha -> LList alpha -> LList alpha'
`Conss' =
    _/\_ `$x0' -> \ `$x1'  ::  `$x0'
		    `$x1' `$x2'  ::  `LList $x0'
			  `$x2' ->
	`Conss' {_@_ `$x0' `$x1' `$x2'}
Rec {
`append'  ::  `LList taC4 -> LList taC4 -> LList taC4'
`append' =
    _/\_ `$x0' -> \ `$x1'  ::  `LList $x0'
		    `$x1' `$x2'  ::  `LList $x0'
			  `$x2' ->
	case `$x1' of {
	  `Nill' -> `$x2';
	  `Conss' `$x3' `$x4' ->
	      let {
		`$x5'  ::  `LList $x0'
		`$x5' =
		    `append' _@_ `$x0' `$x4' `$x2'
	      } in  `Conss' {_@_ `$x0' `$x3' `$x5'};
	}
end Rec }
`FF'  ::  `Boolean'
`FF' =
    `FF' {}
`TT'  ::  `Boolean'
`TT' =
    `TT' {}
`$d6'  ::  `{PrelBase.Eval Boolean}'
`$d6' =
    `PrelBase.void'
`$d3'  ::  `{PrelBase.Eval Nat}'
`$d3' =
    `PrelBase.void'
