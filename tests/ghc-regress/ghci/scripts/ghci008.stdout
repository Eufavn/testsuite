class (Eq a, Show a) => Num a where
  (+) :: a -> a -> a
  ...
infixl 6 +
-- Imported from `GHC.Num'
class (Eq a, Show a) => Num a where
  (+) :: a -> a -> a
  ...
infixl 6 +
-- Imported from `GHC.Num'
data (RealFloat a) => Complex a = !a :+ !a
infix 6 :+
-- Imported from `Data.Complex'
data (RealFloat a) => Complex a = !a :+ !a
infix 6 :+
-- Imported from `Data.Complex'
class (RealFrac a, Floating a) => RealFloat a where
  floatRadix :: a -> Integer
  floatDigits :: a -> Int
  floatRange :: a -> (Int, Int)
  decodeFloat :: a -> (Integer, Int)
  encodeFloat :: Integer -> Int -> a
  exponent :: a -> Int
  significand :: a -> a
  scaleFloat :: Int -> a -> a
  isNaN :: a -> Bool
  isInfinite :: a -> Bool
  isDenormalized :: a -> Bool
  isNegativeZero :: a -> Bool
  isIEEE :: a -> Bool
  atan2 :: a -> a -> a
-- <no location info>
instance RealFloat Float 	-- Imported from `GHC.Float'
instance RealFloat Double 	-- Imported from `GHC.Float'
instance RealFloat CLDouble 	-- Imported from `Foreign.C.Types'
instance RealFloat CFloat 	-- Imported from `Foreign.C.Types'
instance RealFloat CDouble 	-- Imported from `Foreign.C.Types'
isPrefixOf :: (Eq a) => [a] -> [a] -> Bool
-- Imported from `Data.List'
