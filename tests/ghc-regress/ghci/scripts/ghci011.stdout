data [] a = [] | a : [a] 	-- <wired into compiler>
instance (Eq a) => Eq [a] -- Defined in GHC.Base
instance Monad [] -- Defined in GHC.Base
instance Functor [] -- Defined in GHC.Base
instance (Ord a) => Ord [a] -- Defined in GHC.Base
instance (Read a) => Read [a] -- Defined in GHC.Read
instance (Show a) => Show [a] -- Defined in GHC.Show

data [] a = [] | ... 	-- <wired into compiler>
data () = () 	-- <wired into compiler>
instance Bounded () -- Defined in GHC.Enum
instance Enum () -- Defined in GHC.Enum
instance Eq () -- Defined in GHC.Base
instance Ord () -- Defined in GHC.Base
instance Read () -- Defined in GHC.Read
instance Show () -- Defined in GHC.Show

data () = () 	-- <wired into compiler>
data (,) a b = (,) a b 	-- <wired into compiler>
instance (Bounded a, Bounded b) => Bounded (a, b)
  -- Defined in GHC.Enum
instance (Eq a, Eq b) => Eq (a, b) -- Defined in Data.Tuple
instance (Ord a, Ord b) => Ord (a, b) -- Defined in Data.Tuple
instance (Read a, Read b) => Read (a, b) -- Defined in GHC.Read
instance (Show a, Show b) => Show (a, b) -- Defined in GHC.Show

data (,) a b = (,) a b 	-- <wired into compiler>
