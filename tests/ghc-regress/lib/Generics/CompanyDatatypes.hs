{-% DrIFT (Automatic class derivations for Haskell) %-}
{-%       version 1.8 for Strafunski                %-}
{-# OPTIONS -fglasgow-exts #-}

module CompanyDatatypes where

import Data.Generics hiding (Unit)

data Company  = C [Dept]               deriving (Eq, Show, Typeable)
data Dept     = D Name Manager [Unit]  deriving (Eq, Show, Typeable)
data Unit     = PU Employee | DU Dept  deriving (Eq, Show, Typeable)
data Employee = E Person Salary        deriving (Eq, Show, Typeable)
data Person   = P Name Address         deriving (Eq, Show, Typeable)
data Salary   = S Float                deriving (Eq, Show, Typeable)
type Manager  = Employee
type Name     = String
type Address  = String

-- An illustrative company
genCom :: Company
genCom = C [D "Research" laemmel [PU joost, PU marlow],
            D "Strategy" blair   []]

-- A typo for the sake of testing equality
genCom' :: Company
genCom' = C [D "Research" lammel [PU joost, PU marlow],
             D "Strategy" blair   []]

lammel, laemmel, joost, blair :: Employee
lammel  = E (P "Lammel" "Amsterdam") (S 8000)
laemmel = E (P "Laemmel" "Amsterdam") (S 8000)
joost   = E (P "Joost"   "Amsterdam") (S 1000)
marlow  = E (P "Marlow"  "Cambridge") (S 2000)
blair   = E (P "Blair"   "London")    (S 100000)

-- Some more test data
person1 = P "Lazy" "Home"
dept1   = D "Useless" (E person1 undefined) []
{-* Generated by DrIFT-Strafunksi 1.8 : Look, but Don't Touch. *-}
instance Data Company where
    gfoldl f z (C aa) = z C `f` aa
    gunfold f z c | conString c == "C" = f (z C)
    conOf (C aa) = Constr{ conString = "C" }
    consOf _ = [ Constr{ conString = "C" }  ]

instance Data Dept where
    gfoldl f z (D aa ab ac) = z D `f` aa `f` ab `f` ac
    gunfold f z c | conString c == "D" = f (f (f (z D)))
    conOf (D aa ab ac) = Constr{ conString = "D" }
    consOf _ = [ Constr{ conString = "D" }  ]

instance Data Unit where
    gfoldl f z (PU aa) = z PU `f` aa
    gfoldl f z (DU aa) = z DU `f` aa
    gunfold f z c | conString c == "PU" = f (z PU)
    gunfold f z c | conString c == "DU" = f (z DU)
    conOf (PU aa) = Constr{ conString = "PU" }
    conOf (DU aa) = Constr{ conString = "DU" }
    consOf _ = [ Constr{ conString = "PU" }  ,  Constr{ conString = "DU" } ]

instance Data Employee where
    gfoldl f z (E aa ab) = z E `f` aa `f` ab
    gunfold f z c | conString c == "E" = f (f (z E))
    conOf (E aa ab) = Constr{ conString = "E" }
    consOf _ = [ Constr{ conString = "E" }  ]

instance Data Person where
    gfoldl f z (P aa ab) = z P `f` aa `f` ab
    gunfold f z c | conString c == "P" = f (f (z P))
    conOf (P aa ab) = Constr{ conString = "P" }
    consOf _ = [ Constr{ conString = "P" }  ]

instance Data Salary where
    gfoldl f z (S aa) = z S `f` aa
    gunfold f z c | conString c == "S" = f (z S)
    conOf (S aa) = Constr{ conString = "S" }
    consOf _ = [ Constr{ conString = "S" }  ]

--  Imported from other files :-

