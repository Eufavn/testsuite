
==================== Typechecked ====================
Print001.BarNil{-rb,x-} =
    \ a{-rsr-} -> Print001.BarNil{-rb,x-} {__a a{-rsr-}}
Print001.BarCon{-rd,x-} =
    \ a{-rsr-} tpl_B1 tpl_B2 ->
	Print001.BarCon{-rd,x-} {__a a{-rsr-} tpl_B1 tpl_B2}
Print001.MkFoo{-rh,x-} =
    \ d{-rsv-} e{-rsw-} f{-rsx-} tpl_B1 tpl_B2 tpl_B3 ->
	Print001.MkFoo{-rh,x-} {__a d{-rsv-}
				__a e{-rsw-}
				__a f{-rsx-}
				tpl_B1
				tpl_B2
				tpl_B3}
AbsBinds
[a{-a145-}, b{-a146-}]
[]
[([a{-a145-}, b{-a146-}], Print001.g{-r7,x-}, g{-a142-})]
    g{-a142-} x{-a148-} = lit_a15c
AbsBinds
[c{-a14q-}, a{-a14r-}, b{-a14s-}]
[_dEq{-a14w-}, _dOrd{-a14x-}, _dIx{-a14y-}]
[([a{-a14r-}, b{-a14s-}, c{-a14q-}],
  Print001.f2{-r5,x-},
  f2{-a14n-})]
    f2{-a14n-} x{-a14u-} = x{-a14u-}
AbsBinds
[c{-a14T-}, a{-a14U-}, b{-a14V-}]
[_dEq{-a14Z-}]
[([a{-a14U-}, b{-a14V-}, c{-a14T-}],
  Print001.f{-r3,x-},
  f{-a14Q-})]
    f{-a14Q-} x{-a14X-} = x{-a14X-}
AbsBinds
[d{-a156-}, e{-a158-}, f{-a15a-}]
[]
[([d{-a156-}, e{-a158-}, f{-a15a-}],
  Print001.mkFoo{-r1,x-},
  mkFoo{-a15b-})]
    mkFoo{-a15b-}
	= Print001.MkFoo{-rh,x-} [d{-a156-}, e{-a158-}, f{-a15a-}]
lit_a15c = PrelBase.F#{-66,w-} 2.0#


ghc: module version changed to 1; reason: no old .hi file
__export Print001 f f2 g mkFoo Bar{BarNil BarCon} Foo{MkFoo};
1 data Bar a = BarNil |  BarCon (Foo a a a) (Bar a) ;
1 data Foo d e f = MkFoo [((d -> PrelBase.Int) -> d) -> e] (d -> e, e -> e) PrelBase.() ;
1 f :: __forall [a b c] {PrelBase.Eq a} => (a -> b -> c) -> a -> b -> c ;
1 f2 :: __forall [a b c] {PrelBase.Eq a, PrelBase.Ord a, Ix.Ix c} => (a -> b -> c) -> a -> b -> c ;
1 g :: __forall [a b] => Foo PrelBase.Int (a -> b) (a -> [(a, PrelBase.Double, PrelBase.Int)]) -> PrelBase.Float ;
1 mkFoo :: __forall [d e f] => [((d -> PrelBase.Int) -> d) -> e] -> (d -> e, e -> e) -> PrelBase.() -> Foo d e f ;
