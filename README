Running the test suite against a GHC build
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use the test suite to test a GHC build, first say 'make' in
fptools/testsuite.  The build system will build the test driver. To
run the tests, cd into tests/ghc-regress and say 'make' to run all the
tests against the GHC build in the same source tree.  You'll get a
summary indicating how many tests succeeded and failed (including how
many of the failures were 'expected'), and a list of which tests
failed.  To investigate the failures in more detail, see "Running
individual tests" below.


Running the testsuite with a compiler other than GHC
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(to be written.  The plan is something like: 

	cvs checkout fpconfig
	cd fptools
	cvs checkout testsuite
	autoconf
	./configure
	cd testsuite
	make TestCompiler=nhc98
)


Running individual tests or subdirectories of the testsuite
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Most of the subdirectories in the testsuite have a Makefile.  In these
subdirectories you can use 'make' to run the test driver in several
ways:

	make		-- run all the tests in the current directory
	make verbose	-- as make test, but up the verbosity
	make accept	-- run the tests, accepting the current output

The following variables may be set on the make command line, to adjust
various

	TESTS			-- specific tests to run
	EXTRA_HC_OPTS		-- extra flags to send to the Haskell compiler
	EXTRA_RUNTEST_OPTS 	-- extra flags to give the test driver
	CONFIG			-- use a different configuration file


Updating tests when the output changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the output of a test has changed, but the new output is still
correct, you can automatically update the sample output to match the
new output like so:

	make accept TESTS=<test-name>

where <test-name> is the name of the test.  In a directory which
contains a single test, or if you want to update *all* the tests in
the current directory, just omit the 'TESTS=' part.


Adding a new test
~~~~~~~~~~~~~~~~~

Almost all tests have a single source file and fall into one of the
categories should_fail (to compile), should_compile, or should_run.

Stuff to do:

1.  Place the source and any expected outputs for the test in 

       ghc-regress/appropriateDirectory/should_<whatever>

    Place a should_xyz test in the should_xyz directory; putting it
    elsewhere is possible, but confusing.

2.  Edit all.T in the relevant directory and add a line for the
    test.  How to do this should be obvious.  For the record, the
    user-level functions are:

       -- Run a should_run vanilla (single-source-file) test.  
          You can specify extra compile and run flags, and if the
          run is expected to have a non-zero exit code, that too.
          The run's .stderr must match the specified .stderr if
          it exists.  The run's .stdout must match at least one of
          the specified .stdouts, if they exist.

       vt ( extra_compile_args, 
            extra_run_args, 
            expected_nonzero_run_result )


       -- Run a vanilla should_compile test.  To pass, the compiler must
          exit with 0, and the normalised .stderr, if it exists, must
          match the normalised specified .stderr.

       vtc ( extra_compile_args )

       
       -- Run a vanilla should_fail test.  To pass, the compiler must
          exit with non-zero, and the normalised .stderr, which must exist,
          must match the normalised specified .stderr.

       vtf ( extra_compile_args )


LIMITATIONS

1.  Only single-source-file tests are properly supported at the mo.
    To be fixed.

2.  All compilations are passed -no-recomp -dcore-lint, so there's
    no point in adding them.

3.  If you want to pass a flag to a whole bunch of tests, write a 
    small wrapper fn to do this.  See vtc vs myvtc in 

       ghc-regress/typecheck/should_compile/all.T.

4.  Current mis-/un-handled tests are documented in ghc-regress/NOTES.



ERROR MESSAGE NORMALISATION

Is done to reduce spurious failures due to changes in capitalisation
and whitespaces.  Expected and actual error messages are normalised
prior to comparison.  What it does:

-- Remove all whitespace lines
-- Merge all other whitespace into a single space.
-- Make all lowercase.
-- Look for file names and zap the directory part:
      foo/var/xyzzy/somefile.ext  -->  somefile.ext
